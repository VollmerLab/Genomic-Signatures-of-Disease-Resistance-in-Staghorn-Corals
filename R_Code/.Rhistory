library(tidyverse)
library(magrittr)
library(xml2)
library(adegenet)
library(poppr)
library(reticulate)
#### Functions ####
convert_to_decimal <- function(x){
out <- str_split(x, 'W|N') %>%
unlist(recursive = FALSE) %>%
as.numeric() %>%
magrittr::divide_by(c(1, 60)) %>%
sum
if_else(str_detect(x, 'W'), -1 * out, out)
}
srr_to_srs <- function(data){
pysradb <- import('pysradb')
db = pysradb$SRAweb()
srr_ids <- filter(data, !is.na(SRR_id)) %>%
pull(SRR_id)
out <- db$srr_to_srs(srr_ids, detailed = FALSE,
sample_attribute = FALSE,
expand_sample_attributes = FALSE) %>%
as_tibble() %>%
select(run_accession, sample_accession) %>%
rename(SRS_id = sample_accession, SRR_id = run_accession)
full_join(data, out, by = 'SRR_id')
}
#### Gather Collection Location Data ####
florida_locations <- read_csv('../Data/SP.pop.data.csv', show_col_types = FALSE) %>%
select(Genotype, subregion, reefName, x.coord, y.coord) %>%
rename(gen_id = Genotype,
lat = x.coord,
lon = y.coord) %>%
mutate(reef = str_c(subregion, reefName, sep = '-'), .keep = 'unused')
panama_locations <- tribble(
~'reef', ~'lon_garmin', ~'lat_garmin',
'tetas', '82W6.068', '9N16.579',
'sebastians', '82W7.631', '9N15.274',
'holy shit', '82W6.929', '9N16.773',
'CK14', '82W7.557', '9N15.238',
'CK4', '82W7.625', '9N15.517'
) %>%
rowwise %>%
mutate(lat = convert_to_decimal(lat_garmin),
lon = convert_to_decimal(lon_garmin)) %>%
ungroup %>%
select(-ends_with('garmin')) %>%
mutate(reef = str_replace_all(reef, c('tetas' = 'Tet', 'sebastians' = 'SR', 'holy shit' = 'HS')))
#### Process Baum Lab Locations ###
baum_locations <- read_xml('../Data/biosample_result.xml') %>%
as_list() %>%
as_tibble %>%
unnest_wider(BioSampleSet) %>%
rowwise %>%
mutate(SRS_id = Ids[[3]][[1]]) %>%
mutate(location = Attributes[[3]][[1]] %>% str_remove(' \\(.*\\)')) %>%
select(SRS_id, location)
#### Read in Genetic file data & Join All data ####
all_individual_data <- read_delim('../Data/bam.list', delim = '\t',
col_names = 'file', show_col_types = FALSE) %>%
mutate(ID = str_remove(file, dirname(file)) %>% str_remove('/') %>% str_remove('-fp.*bam$')) %>%
select(-file) %>%
mutate(SRR_id = str_extract(ID, 'SRR[0-9]+')) %>%
srr_to_srs() %>%
left_join(baum_locations, by = 'SRS_id') %>%
select(-SRR_id, -SRS_id) %>%
mutate(gen_id = str_extract(ID, '[A-Za-z0-9]+$')) %>%
left_join(florida_locations, by = 'gen_id') %>%
mutate(data_origin = if_else(str_detect(ID, 'baum'), 'baum', 'vollmer'),
species = str_extract(ID, 'A[cp]|ac|apr|apa') %>% str_to_sentence(),
location = if_else(is.na(location), str_extract(ID, 'FL|PA'), location) %>% str_replace_all(c('^FL$' = 'Florida', '^PA$' = 'Panama')),
reef = if_else(data_origin == 'vollmer' & location == 'Panama', str_extract(ID, 'CK4|CK14|HS|SR|Tet'), reef)) %>%
select(ID, gen_id, data_origin, species, location, reef, lat, lon) %>%
left_join(panama_locations, by = 'reef') %>%
mutate(lat = coalesce(lat.x, lat.y),
lon = coalesce(lon.x, lon.y),
.keep = 'unused')
dir.create('../intermediate_files')
write_csv(all_individual_data, '../intermediate_files/collected_sample_metadata.csv')
#### Libraries ####
library(tidyverse)
library(mgcv)
library(gratia)
library(patchwork)
#### Read in Data ####
full_tank_data <- read_csv('../Data/Combo_Census.csv', show_col_types = FALSE) %>%
pivot_longer(cols = where(is.numeric),
names_to = 'day',
values_to = 'infected',
names_transform = as.numeric,
values_transform = as.integer,
values_drop_na = TRUE) %>%
janitor::clean_names() %>%
#Keep only diseased treatment since healthy treatment not involved in calculation of disease resistance
# filter(treatment == 'D') %>%
#Remove Tanks which crashed due to anoxia
filter(treatment != 'Treatment') %>%
filter(!((tank == 'H1' & location == 'PA') | (tank == 'H2' & location == 'FL') |
(tank == 'H3' & location == 'FL'))) %>%
#Recode to match with
mutate(location = str_replace_all(location, c('FL' = 'Florida', 'PA' = 'Panama')),
across(c(site, genotype), ~str_replace_all(., c('Holyshit' = 'HS', 'Sebastian' = 'SR', 'Tetas' = 'Tet'))),
site = if_else(location == 'Florida', NA_character_, site),
genotype = str_remove(genotype, '_[0-9]+_')) %>%
dplyr::rename(reef = site,
gen_id = genotype) %>%
select(-reef) %>%
left_join(read_csv('../intermediate_files/collected_sample_metadata.csv', show_col_types = FALSE) %>%
select(-location),
by = 'gen_id') %>%
mutate(dummy1 = 1,
dummy2 = 1,
dummy3 = 1,
across(where(is.character), as.factor)) %>%
select(-species, -data_origin, -ID)
#### Estimate Disease Resistance - assume location effect is purely the result of experimental differences ####
survival_model_locationExperimental <- gam(day ~ treatment + s(location, bs = 're', by = dummy1) +
# s(location, reef, bs = 're', by = dummy) +
s(location, gen_id, bs = 're', by = dummy3) +
# s(location, reef, gen_id, clone_group, bs = 're', by = dummy) +
s(location, tank, bs = 're', by = dummy2),
weights = infected,
family = cox.ph(),
data = full_tank_data,
method = 'REML',
control = gam.control(nthreads = 4, trace = TRUE))
summary(survival_model_locationExperimental)
survival_model_locationExperimental2 <- gam(day ~ s(location, bs = 're', by = dummy1) +
# s(location, reef, bs = 're', by = dummy) +
s(location, gen_id, bs = 're', by = dummy3) +
# s(location, reef, gen_id, clone_group, bs = 're', by = dummy) +
s(location, tank, bs = 're', by = dummy2),
weights = infected,
family = cox.ph(),
data = filter(full_tank_data, treatment == 'D'),
method = 'REML',
control = gam.control(nthreads = 4, trace = TRUE))
summary(survival_model_locationExperimental2)
#### Get Deviance Explained by Individual Components ####
survival_model_locationExperimental_noID <- gam(day ~ s(location, bs = 're', by = dummy1) +
s(location, tank, bs = 're', by = dummy2),
weights = infected,
family = cox.ph(),
data = filter(full_tank_data, treatment == 'D'),
method = 'REML',
control = gam.control(nthreads = 4, trace = TRUE))
summary(survival_model_locationExperimental_noID)
survival_model_locationExperimental_noTank <- gam(day ~ s(location, bs = 're', by = dummy1) +
s(location, gen_id, bs = 're', by = dummy3),
weights = infected,
family = cox.ph(),
data = filter(full_tank_data, treatment == 'D'),
method = 'REML',
control = gam.control(nthreads = 4, trace = TRUE))
summary(survival_model_locationExperimental_noTank)
survival_model_locationExperimental_onlyLocation <- gam(day ~ s(location, bs = 're', by = dummy1),
weights = infected,
family = cox.ph(),
data = filter(full_tank_data, treatment == 'D'),
method = 'REML',
control = gam.control(nthreads = 4, trace = TRUE))
summary(survival_model_locationExperimental_onlyLocation)
#### Percent var explained by genotype in each location alone ####
just_florida_full <- gam(day ~ s(gen_id, bs = 're', by = dummy3) +
s(tank, bs = 're', by = dummy2),
weights = infected,
family = cox.ph(),
data = filter(full_tank_data, treatment == 'D',
location == 'Florida'),
method = 'REML',
control = gam.control(nthreads = 4, trace = TRUE))
summary(just_florida_full)
just_florida_full_noTank <- gam(day ~ s(gen_id, bs = 're', by = dummy3),
weights = infected,
family = cox.ph(),
data = filter(full_tank_data, treatment == 'D',
location == 'Florida'),
method = 'REML',
control = gam.control(nthreads = 4, trace = TRUE))
summary(just_florida_full_noTank)
just_florida_full_noGen <- gam(day ~ s(tank, bs = 're', by = dummy2),
weights = infected,
family = cox.ph(),
data = filter(full_tank_data, treatment == 'D',
location == 'Florida'),
method = 'REML',
control = gam.control(nthreads = 4, trace = TRUE))
summary(just_florida_full_noGen)
just_panama_full <- gam(day ~ s(gen_id, bs = 're', by = dummy3) +
s(tank, bs = 're', by = dummy2),
weights = infected,
family = cox.ph(),
data = filter(full_tank_data, treatment == 'D',
location == 'Panama'),
method = 'REML',
control = gam.control(nthreads = 4, trace = TRUE))
summary(just_panama_full)
just_panama_full_noTank <- gam(day ~ s(gen_id, bs = 're', by = dummy3),
weights = infected,
family = cox.ph(),
data = filter(full_tank_data, treatment == 'D',
location == 'Panama'),
method = 'REML',
control = gam.control(nthreads = 4, trace = TRUE))
summary(just_panama_full_noTank)
just_panama_full_noGen <- gam(day ~ s(tank, bs = 're', by = dummy2),
weights = infected,
family = cox.ph(),
data = filter(full_tank_data, treatment == 'D',
location == 'Panama'),
method = 'REML',
control = gam.control(nthreads = 4, trace = TRUE))
summary(just_panama_full_noGen)
#### Plot Survivorship Curves ####
full_tank_data %>%
filter(treatment == 'D') %>%
mutate(gen_id = str_c('G', location)) %>%
select(gen_id, location, treatment) %>%
distinct %>%
mutate(dummy1 = 1,
dummy2 = 0,
dummy3 = 0,
tank = 'sim') %>%
expand_grid(day = seq(0, 7, length.out = 1000)) %>%
bind_cols(., predict(survival_model_locationExperimental, newdata = ., se.fit = TRUE, type = 'response')) %>%
ggplot(aes(x = day, y = fit, colour = location,
ymin = fit - se.fit, ymax = fit + se.fit,
fill = location)) +
geom_ribbon(alpha = 0.5, colour = NA, show.legend = FALSE) +
geom_line(show.legend = FALSE) +
scale_y_continuous(labels = scales::percent_format(accuracy = 1)) +
labs(x = 'Experiment Day',
y = 'Fragment Survival (%)') +
theme_classic() +
theme(plot.background = element_rect(size = 1, linetype = 'solid', colour = NA, fill = "black"),
panel.background = element_rect(size = 1, linetype = 'solid', colour = 'white', fill = "black"),
axis.title = element_text(size = 18, colour = 'white'),
axis.text = element_text(size = 14, colour = 'white'),
axis.ticks = element_line(colour = 'white'),
axis.line = element_line(colour = 'white'))
#### Estimate Disease Resistance ####
disease_resistance <- full_tank_data %>%
select(gen_id, location, treatment) %>%
distinct %>%
mutate(dummy1 = 0,
dummy2 = 0,
dummy3 = 1,
tank = 'sim',
day = 6) %>%
bind_cols(., predict(survival_model_locationExperimental, newdata = ., se.fit = TRUE, type = 'response')) %>%
dplyr::rename(disease_resistance = fit) %>%
select(-se.fit) %>%
mutate(dummy1 = 1) %>%
# mutate(day = 5) %>%
bind_cols(., predict(survival_model_locationExperimental, newdata = ., se.fit = TRUE, type = 'response')) %>%
dplyr::rename(disease_resistance_with_location = fit) %>%
select(-se.fit, -tank, -dummy1, -dummy2, -day) %>%
mutate(disease_resistance = as.numeric(disease_resistance),
disease_resistance_with_location = as.numeric(disease_resistance_with_location)) %>%
select(-disease_resistance_with_location, -dummy3)
write_csv(disease_resistance, '../intermediate_files/disease_resistance.csv')
#### Libraries ####
library(tidyverse)
library(magrittr)
library(adegenet)
library(poppr)
library(SNPRelate)
#### Settings - and order of filtering ####
confidence_cutoff <- 0.99 #require probability of genotype to be greater than this
#Identify Clone Groups
#Remove Clones based on which has least missing loci
individual_missingness <- 0.3 #Maximum % of loci missing in an individual to keep individual
#Split into two datasets one to compare A. cerv and A. palm & one to compare within A. cerv
#Remove if entirely missing within one species/location
#Remove if monomorphic
locus_missingness <- 0.1 #Maximum % of individuals missing in a locus to keep locus
minor_allele_frequency <- 0.05
LD_cutoff <- 0.5 #Linkage disequilibrium cutoff
#### Functions ####
process_angsd <- function(genotype_file, probability_file, sample_names, cutoff){
filter_below <- function(genotype, probabilites, cutoff){
to_swap_to_na <- probabilites < cutoff
probabilites[to_swap_to_na] <- NA
message('Swapped ', scales::percent(sum(to_swap_to_na, na.rm = TRUE) / prod(dim(probabilites)), accuracy = 1),
' genotypes to NA due to having probability less than ', cutoff)
genotype * round(probabilites, 0)
}
genotypes <- read_csv(genotype_file,
col_types = cols(.default = col_integer(),
contig = col_character(),
ref = col_character(),
alt = col_character())) %>%
mutate(locus_number = row_number(),
genotype = cbind(!!!syms(sample_names)),
.keep = 'unused')
genotype_probabilities <- read_csv(probability_file,
col_types = cols(.default = col_double(),
contig = col_character(),
ref = col_character(),
alt = col_character())) %>%
mutate(locus_number = row_number(),
genotype_probability = cbind(!!!syms(sample_names)),
.keep = 'unused')
full_join(genotypes, genotype_probabilities,
by = c('contig', 'position', 'ref', 'alt', 'locus_number')) %>%
#Filter out genotypes below confidence threshold
mutate(genotype = filter_below(genotype = genotype,
probabilites = genotype_probability,
cutoff = cutoff),
.keep = 'unused') %>%
#Remove Loci fixed after confidence cutoff
mutate(alt_freq = rowSums(genotype, na.rm = TRUE) / (2 * (rowSums(!is.na(genotype)))),
ref_freq = 1 - alt_freq,
.before = genotype) %>%
filter(ref_freq != 1, alt_freq != 1) %>%
arrange(locus_number) %>%
select(-locus_number, -ref_freq, -alt_freq) %>%
#Convert to genlight to more easily use in adegenet etc.
mutate(snp_loc = str_c(ref, alt, sep = '/'),
loc_name = str_c(contig, position, sep = '-'),
.before = genotype) %$%
new('genlight', gen = t(genotype), ploidy = 2,
loc.all = snp_loc, loc.names = loc_name,
chromosome = contig, position = position)
}
flip_loci <- function(gl){
#Use to flip loci that the minor allele was called as the major in acerv due to calls being done for both species
tmp <- as_tibble(strata(gl)) %>%
mutate(genotype = as.matrix(gl))
just_acerv <- tmp %>%
filter(data_origin == 'vollmer',
species == 'Ac')
n_alleles <- 2 * colSums(!is.na(just_acerv$genotype))
# p <- (2 * colSums(just_acerv$genotype == 0, na.rm = TRUE) + colSums(just_acerv$genotype == 1, na.rm = TRUE)) / n_alleles
q <- (2 * colSums(just_acerv$genotype == 2, na.rm = TRUE) + colSums(just_acerv$genotype == 1, na.rm = TRUE)) / n_alleles
loci_flip <- names(q)[q > 0.5]
to_flip <- tmp$genotype[,loci_flip]
to_flip[to_flip == 2] <- 3
to_flip[to_flip == 0] <- 2
to_flip[to_flip == 3] <- 0
tmp$genotype[,loci_flip] <- to_flip
out <- new('genlight', gen = tmp$genotype, ploidy = 2,
loc.all = gl@loc.all, loc.names = gl@loc.names,
chromosome = gl@chromosome, position = gl@position)
strata(out) <- strata(gl)
out
}
remove_monomorphic <- function(snp_clone){
snp_mat <- as.matrix(snp_clone)
#n_ind <- dim(snp_mat)[1]
all_0 <- colSums(snp_mat == 0, na.rm = TRUE) / colSums(!is.na(snp_mat))
# all_2 <- colSums(snp_clone == 2, na.rm = TRUE) / n_ind
loci_to_remove <- unname(which(all_0 == 1 | all_0 == 0))
message(scales::comma(length(loci_to_remove)), ' monomorphic loci removed')
snp_clone[,-loci_to_remove]
}
remove_missing_pop <- function(snp_clone, pop){
setPop(snp_clone) <- pop
missing_loci_in_pops <- seppop(snp_clone) %>%
map(~as.matrix(.x) %>%
is.na(.) %>%
colSums(.) %>%
equals(nInd(.x)) %>%
which()) %>%
unlist %>%
names %>%
unique %>%
str_remove(str_c(levels(pop(snp_clone)), collapse = '|')) %>%
str_remove('^\\.') %>%
unique
message('Removed ', scales::comma(length(missing_loci_in_pops)),
' loci which were all NAs in one of the populations')
snp_clone[,!snp_clone@loc.names %in% missing_loci_in_pops]
}
genlight_to_gds <- function(gen_light, out_name){
SNPRelate::snpgdsCreateGeno(gds.fn = out_name,
genmat = as.matrix(gen_light),
sample.id = gen_light@ind.names,
snp.id = gen_light@loc.names,
snp.chromosome = str_extract(gen_light@chromosome, '[0-9]+') %>% as.integer,
snp.position = gen_light@position,
snp.allele = gen_light@loc.all,
snpfirstdim = FALSE)
genofile <- SNPRelate::snpgdsOpen(out_name)
SNPRelate::snpgdsSummary(genofile)
SNPRelate::snpgdsClose(genofile)
out_name
}
get_gds <- function(gds, column){
z <- 0
if(is.character(gds)){
gds <- snpgdsOpen(gds)
z <- 1
}
out <- gdsfmt::index.gdsn(gds, index = column) %>%
gdsfmt::read.gdsn()
if(z == 1){
snpgdsClose(gds)
}
out
}
choose_snps <- function(genomic_data, samples_use = NULL, ...){
genofile <- snpgdsOpen(genomic_data)
if(is.null(samples_use)){
samples_use <- get_gds(genofile, 'sample.id')
}
snps_used <- snpgdsSelectSNP(genofile, autosome.only = FALSE,
sample.id = samples_use, ...)
snpgdsClose(genofile)
snps_used
}
find_unlinked_loci <- function(gds_file, ...){
genofile <- snpgdsOpen(gds_file)
prune_snps <- snpgdsLDpruning(genofile, autosome.only = FALSE, ...)
snpgdsClose(genofile)
unlist(prune_snps) %>%
unname
}
preprocess_loci <- function(genomic, samples_use, population, save_dir, name_base, linkage_filter){
gc(verbose = FALSE)
#Subset loci & remove monomorphic/entirely missing loci
subsample_genomic <- genomic[genomic@ind.names %in% samples_use] %>%
remove_monomorphic() %>%
remove_missing_pop(population)
subsample_genomic_gds <- genlight_to_gds(subsample_genomic, str_c(save_dir, '/initial_', name_base, '.gds'))
#Filter loci on MAF/missingness threshold
locus_keep <- choose_snps(subsample_genomic_gds,
maf = minor_allele_frequency,
missing.rate = locus_missingness)
filtered_subsample <- subsample_genomic[,locus_keep]
#Remove linked loci
if(linkage_filter){
unlinked_filtered_subsample_loci <- find_unlinked_loci(subsample_genomic_gds, ld.threshold = LD_cutoff,
method = 'composite', start.pos = 'random',
snp.id = locus_keep, slide.max.bp = 250000)
unlinked_filtered_subsample <- filtered_subsample[,unlinked_filtered_subsample_loci]
write_rds(unlinked_filtered_subsample, str_c(save_dir, '/unlinked_preprocessed_', name_base, '.rds'), compress = 'xz')
filtered_subsample_gds <- genlight_to_gds(unlinked_filtered_subsample, str_c(save_dir, '/unlinked_preprocessed_', name_base, '.gds'))
return(unlinked_filtered_subsample)
} else {
write_rds(filtered_subsample, str_c(save_dir, '/preprocessed_', name_base, '.rds'), compress = 'xz')
filtered_subsample_gds <- genlight_to_gds(filtered_subsample, str_c(save_dir, '/preprocessed_', name_base, '.gds'))
return(filtered_subsample)
}
}
geno <- read_csv('../Data/genotypes.csv')
prob <- read_csv('../Data/genotype_probabilities.csv')
?xz
?gz
?gzfile
write_csv(geno, file = xzfile('../Data/genotypes.csv.gz', compression = 9))
write_csv(prob, file = xzfile('../Data/genotype_probabilities.csv.gz', compression = 9))
write_csv(geno, file = xzfile('../Data/genotypes.csv.xz', compression = 9))
write_csv(prob, file = xzfile('../Data/genotype_probabilities.csv.xz', compression = 9))
prob_file <- read_csv('../Data/genotype_probabilities.csv')
library(tidyverse)
prob_file <- read_csv('../Data/genotype_probabilities.csv')
prob_file
prob_file <- read_csv('../Data/genotype_probabilities.csv',
col_types = cols(.default = col_double(),
contig = col_character(),
ref = col_character(),
alt = col_character()))
geno_file <- read_csv('../Data/genotypes.csv.xz',
col_types = cols(.default = col_integer(),
contig = col_character(),
ref = col_character(),
alt = col_character()))
geno_file
prob_file
nrow(prob_file)
nrow(prob_file) / 4
(1:4) * (1:530381)
(1:530381)
2 * (1:530381)
prob_file
prob_file %>%
select(contig) %>%
mutate(id = 1:530381)
prob_file %>%
select(contig) %>%
mutate(id = rep(1:530381, 4))
rep(1:5, 4)
prob_file %>%
select(contig) %>%
mutate(id = rep(1:530381, 4)) %>%
group_split(id)
rep(1:5, each = 4)
prob_file %>%
select(contig) %>%
mutate(id = rep(1:4, each = 530381)) %>%
group_split(id)
prob_file %>%
select(contig) %>%
mutate(id = rep(1:4, each = 530381)) %>%
group_split(id) %>%
map(~select(.x, -id))
split_probs <- prob_file %>%
mutate(id = rep(1:4, each = 530381)) %>%
group_split(id) %>%
map(~select(.x, -id))
split_probs
walk2(split_probs, 1:4, ~write_csv(.x, file = xzfile(str_c('../Data/genotype_probabilities_', .y,'.csv.xz'),
compression = 9)))
